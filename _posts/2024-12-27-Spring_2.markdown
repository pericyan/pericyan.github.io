---
layout: post
title: "[Spring - 2편] View 환경설정 및 빌드"
date: 2024-12-27 01:27:00 +0900
category: Spring
---

# 0. View 환경 설정

<br>

"main/resources/static/" 경로에 "index.html" 파일을 생성하고 다음과 같이 작성한다.

<br>

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    Hello
</body>
</html>
```

<br>

"main/java/hello/hello_gradle/" 경로에 "controller" 디렉토리(패키지)를 만든다. 그리고 하위 항목으로 "HelloController.java"를 생성하고 다음과 같이 작성한다.

<br>

```java
package hello.hello_gradle.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HelloController{

    @GetMapping("hello")
    public String hello(Model model){
        model.addAttribute("data", "hello!!");
        return "hello";
    }

}
```

<br>

spring boot는 mvc 패턴으로 동작한다. 아래는 mdn web docs의 설명이다.
- model: 데이터와 비즈니스 로직을 관리합니다.
- view: 레이아웃과 화면을 처리합니다.
- controller: model과 view로 명령을 전달합니다.

위 코드에서 HelloController라는 이름의 컨트롤러가 만들어졌다.

컨트롤러 코드 위에 @Controller라는 형식으로 annotation이 붙게 되면서(필수) Spring이 자동으로 해당 클래서가 웹 요청을 처리하는 Controller임을 인식할 수 있게 된다.

클라이언트가 서버에 http://localhost:8080/hello 요청을 보내면 HelloController의 @GetMapping("hello")메서드가 model.addAttribute를 통해 데이터를 추가하고 hello라는 이름의 view(template)를 반환한다.

<br>

<br>

"main/resources/templates/" 경로에 "hello.html"을 생성하고 다음과 같이 작성한다.

```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Hello</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>
    <p th:text="'안녕하세요. ' + ${data}" >안녕하세요. 손님</p>
</body>
</html>
```

<br>

HelloController에서 보낸 data를 받아서 hello.html에 표현한다. 이 때 thymeleaf를 사용하여 ${data}로 쉽게 데이터를 텍스트로 추가할 수 있다.

<br>

---

# 1. Spring 빌드

<br>

프로젝트의 root로 이동하고 (위 프로젝트는 hello-gradle) 다음 명령어를 터미널창에서 입력한다.

```shell
./gradlew clean build
```

그리고 생성된 build/libs로 이동한 다음 다음 명령어를 입력한다.

```shell
java -jar "생성된 jar(war)파일명"
```

웹 브라우저 주소창에 http://localhost:8080을 입력하여 웹 어플리케이션이 제대로 실행되는지 확인한다.

<br>