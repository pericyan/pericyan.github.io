---
layout: post
title: "[생산관리 데이터분석 - 4편] "
date: 2025-01-02 16:45:00 +0900
category: PM_Data_Analysis
---

# Pandas Dataframe

## 데이터프레임 생성
### 1.1 DataFrame 생성
```python
import pandas as pd

A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
i = ['첫째행', '둘째행']
c = ['컬럼1', '컬럼2', '컬럼3']

DB1 = pd.DataFrame(A, index=i, columns=c) # 값 리스트, 인덱스 리스트, 컬럼 리스트
DB2 = pd.DataFrame(A, columns=c) # 인덱스 리스트를 기입 안 하면, 자동으로 숫자가 매겨짐

print(DB1)
print(DB2)
```
결과:
```json
     컬럼1  컬럼2  컬럼3
첫째행    1    2    3
둘째행    4    5    6
셋째행    7    8    9
   컬럼1  컬럼2  컬럼3
0    1    2    3
1    4    5    6
2    7    8    9
```

<br>

### 1.2 컬럼 추가
```python
DB1['컬럼4'] = 0
print(DB1)
```
결과:
```json
     컬럼1  컬럼2  컬럼3  컬럼4
첫째행    1    2    3    0
둘째행    4    5    6    0
셋째행    7    8    9    0
```

<br>


### 1.3 컬럼 삭제
```python
DB3 = DB1.drop(['컬럼4'], axis=1, inplace=False)
DB4 = DB1.drop(['컬럼4'], axis=1, inplace=True)
DB5 = DB1.drop(['둘째행'], axis=0, inplace=False)
print(DB3)
print(DB4)
print(DB5)
print(DB1)
```
결과:
```json
     컬럼1  컬럼2  컬럼3
첫째행    1    2    3
둘째행    4    5    6
셋째행    7    8    9
None
     컬럼1  컬럼2  컬럼3
첫째행    1    2    3
셋째행    7    8    9
     컬럼1  컬럼2  컬럼3
첫째행    1    2    3
둘째행    4    5    6
셋째행    7    8    9
```

<br>

---

<br>

## 2. 파일 업로드
```python
from google.colab import files
import numpy as np
import pandas as pd
import io

uploaded = files.upload()

df = pd.DataFrame()

print(df)
print(df.info())
print(df.describe())
```
결과:
```json
      A Process  B Process  C Process  D Process  E Process
0      3.012215   1.959561   5.136860   2.940989   3.900522
1      3.008235   1.867529   5.039477   2.928948   3.832146
2      3.070391   2.022604   5.106648   3.037827   4.027596
3      2.850238   2.022126   5.022756   2.954797   4.087762
4      3.091985   2.039654   5.020090   2.972964   4.030259
...         ...        ...        ...        ...        ...
9995   3.011362   1.956842   4.856471   2.943115   3.933923
9996   2.796948   2.008159   5.037952   3.061902   4.123042
9997   3.057955   2.048068   4.893091   3.024323   4.152934
9998   2.984360   2.026966   5.085439   2.930090   4.101085
9999   2.890800   2.037206   4.958219   3.105968   4.026098

[10000 rows x 5 columns]
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 10000 entries, 0 to 9999
Data columns (total 5 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   A Process  10000 non-null  float64
 1   B Process  10000 non-null  float64
 2   C Process  10000 non-null  float64
 3   D Process  10000 non-null  float64
 4   E Process  10000 non-null  float64
dtypes: float64(5)
memory usage: 390.8 KB
None
          A Process     B Process     C Process     D Process     E Process
count  10000.000000  10000.000000  10000.000000  10000.000000  10000.000000
mean       2.997850      1.999942      5.001417      3.000008      4.000820
std        0.100158      0.059783      0.150445      0.049815      0.109977
min        2.572294      1.782694      4.308412      2.834629      3.481678
25%        2.929796      1.959168      4.902837      2.967261      3.927438
50%        2.997752      2.000296      5.001059      2.999197      4.000085
75%        3.065830      2.040589      5.101477      3.033420      4.075196
max        3.390543      2.206720      5.583142      3.200479      4.391661
```

<br>

---

<br>

## 3. 조건
### 3.1 조건 하나
```python
print(df[(df['A Process'] > 3.10)])
```
결과:
```json
      A Process  B Process  C Process  D Process  E Process
16     3.200288   1.892622   4.861334   2.973448   4.249201
23     3.107327   1.931452   5.242941   3.083369   3.814216
24     3.269298   2.028002   4.956711   2.957439   3.960542
26     3.113880   1.945501   5.310647   2.964947   3.975716
35     3.108977   1.997617   4.950494   2.956614   3.923256
...         ...        ...        ...        ...        ...
9968   3.116405   2.030306   5.042294   2.988619   4.032277
9969   3.129998   2.018594   4.902624   3.097148   4.179159
9981   3.173098   2.014316   4.946040   2.971804   4.095104
9984   3.220108   2.068676   5.216295   3.033472   3.986204
9986   3.126341   2.033319   5.019355   2.946021   4.147976

[1541 rows x 5 columns]
```

<br>

### 3.2 조건 여러 개

```python
print(df[(df['A Process'] > 3.10)&(df['B Process'] > 2.05)])
```
결과:
```json
      A Process  B Process  C Process  D Process  E Process
99     3.104288   2.069294   4.938792   2.997811   3.854293
111    3.176997   2.056767   4.991003   3.062855   3.928274
156    3.248358   2.143552   5.128678   2.946376   3.943873
166    3.103073   2.062700   5.051139   3.050767   4.083634
176    3.142418   2.060160   5.132223   3.031681   3.845649
...         ...        ...        ...        ...        ...
9886   3.113560   2.090415   4.928312   3.011330   3.874880
9921   3.103605   2.067223   5.250194   3.014236   3.984198
9923   3.147926   2.059098   4.837363   2.966612   4.068721
9955   3.135575   2.068065   4.928871   2.928693   3.957814
9984   3.220108   2.068676   5.216295   3.033472   3.986204

[313 rows x 5 columns]
```

<br>

### 3.3 조건 따로 저장

```python
con1 = df['A Process'] > 3.10
con2 = df['B Process'] > 2.05

print(con1)
print(con2)
print(df[con1 & con2])
```
결과:
```json
0       False
1       False
2       False
3       False
4       False
        ...  
9995    False
9996    False
9997    False
9998    False
9999    False
Name: A Process, Length: 10000, dtype: bool
0       False
1       False
2       False
3       False
4       False
        ...  
9995    False
9996    False
9997    False
9998    False
9999    False
Name: B Process, Length: 10000, dtype: bool
      A Process  B Process  C Process  D Process  E Process
99     3.104288   2.069294   4.938792   2.997811   3.854293
111    3.176997   2.056767   4.991003   3.062855   3.928274
156    3.248358   2.143552   5.128678   2.946376   3.943873
166    3.103073   2.062700   5.051139   3.050767   4.083634
176    3.142418   2.060160   5.132223   3.031681   3.845649
...         ...        ...        ...        ...        ...
9886   3.113560   2.090415   4.928312   3.011330   3.874880
9921   3.103605   2.067223   5.250194   3.014236   3.984198
9923   3.147926   2.059098   4.837363   2.966612   4.068721
9955   3.135575   2.068065   4.928871   2.928693   3.957814
9984   3.220108   2.068676   5.216295   3.033472   3.986204

[313 rows x 5 columns]
```
<br>

---

<br>

## 4. 컬럼 생성
```python
df['A+B'] = df['A Process'] + df['B Process']
print(df.info())

print(df.describe())
```
결과:
```json
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 10000 entries, 0 to 9999
Data columns (total 6 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   A Process  10000 non-null  float64
 1   B Process  10000 non-null  float64
 2   C Process  10000 non-null  float64
 3   D Process  10000 non-null  float64
 4   E Process  10000 non-null  float64
 5   A+B        10000 non-null  float64
dtypes: float64(6)
memory usage: 468.9 KB
None
          A Process     B Process     C Process     D Process     E Process  \
count  10000.000000  10000.000000  10000.000000  10000.000000  10000.000000   
mean       2.997850      1.999942      5.001417      3.000008      4.000820   
std        0.100158      0.059783      0.150445      0.049815      0.109977   
min        2.572294      1.782694      4.308412      2.834629      3.481678   
25%        2.929796      1.959168      4.902837      2.967261      3.927438   
50%        2.997752      2.000296      5.001059      2.999197      4.000085   
75%        3.065830      2.040589      5.101477      3.033420      4.075196   
max        3.390543      2.206720      5.583142      3.200479      4.391661   

                A+B  
count  10000.000000  
mean       4.997792  
std        0.116529  
min        4.547236  
25%        4.918932  
50%        4.998174  
75%        5.076227  
max        5.391910  
```

<br>

---

<br>

## 5. 정렬
### 5.1 
```python
df_sorted = df.sort_values(by = ['A Process'])
print(df_sorted)
```
결과:
```json
      A Process  B Process  C Process  D Process  E Process       A+B
6485   2.572294   2.033965   4.812115   3.010579   4.025471  4.606259
2349   2.611989   1.935247   5.124322   3.007176   4.051320  4.547236
5167   2.635927   2.000614   5.495733   3.065749   3.914972  4.636541
9010   2.654817   2.021866   4.868087   2.931600   3.767298  4.676683
1160   2.663702   1.990547   4.887555   2.852448   4.094842  4.654249
...         ...        ...        ...        ...        ...       ...
9394   3.335264   1.984626   4.745928   2.970765   4.108034  5.319890
4942   3.343874   1.959734   4.989246   3.005260   4.146092  5.303608
6476   3.346212   2.015825   5.126847   2.942969   4.038215  5.362037
395    3.348522   2.012537   5.058636   2.961928   4.078830  5.361059
2100   3.390543   1.924309   5.130317   3.002889   3.913888  5.314853

[10000 rows x 6 columns]
```

<br>

### 5.2
```python
df['A Level'] = df['A Process'] // 3
df_sorted = df.sorted_values(by = ['A Level', 'B Process'])
print(df_sorted)
```
결과:
```json
      A Process  B Process  C Process  D Process  E Process       A+B  A Level
3393   2.973819   1.794695   5.109348   2.997279   3.910301  4.768514      0.0
9086   2.770111   1.797015   5.012450   2.915587   4.031785  4.567127      0.0
1274   2.883325   1.810456   5.020075   2.967577   3.905099  4.693781      0.0
3643   2.887954   1.811206   5.066462   2.917189   4.050627  4.699160      0.0
9807   2.920811   1.813430   5.003603   3.008229   4.075313  4.734241      0.0
...         ...        ...        ...        ...        ...       ...      ...
2854   3.097099   2.185296   5.151471   3.046006   4.166239  5.282395      1.0
9390   3.092095   2.185935   4.969053   3.031738   4.106281  5.278029      1.0
4917   3.034154   2.188912   5.100875   2.950471   4.049063  5.223066      1.0
9522   3.176583   2.193169   5.005538   3.113086   4.011537  5.369752      1.0
1161   3.002272   2.203488   5.119666   2.940149   3.841127  5.205759      1.0

[10000 rows x 7 columns]
```

<br>

### 5.3
```python
df_sorted = df.sorted_values(by = ['A Level', 'B Process'], ascending=False)
print(df_sorted)
```
결과:
```json
      A Process  B Process  C Process  D Process  E Process       A+B  A Level
1161   3.002272   2.203488   5.119666   2.940149   3.841127  5.205759      1.0
9522   3.176583   2.193169   5.005538   3.113086   4.011537  5.369752      1.0
4917   3.034154   2.188912   5.100875   2.950471   4.049063  5.223066      1.0
9390   3.092095   2.185935   4.969053   3.031738   4.106281  5.278029      1.0
2854   3.097099   2.185296   5.151471   3.046006   4.166239  5.282395      1.0
...         ...        ...        ...        ...        ...       ...      ...
9807   2.920811   1.813430   5.003603   3.008229   4.075313  4.734241      0.0
3643   2.887954   1.811206   5.066462   2.917189   4.050627  4.699160      0.0
1274   2.883325   1.810456   5.020075   2.967577   3.905099  4.693781      0.0
9086   2.770111   1.797015   5.012450   2.915587   4.031785  4.567127      0.0
3393   2.973819   1.794695   5.109348   2.997279   3.910301  4.768514      0.0

[10000 rows x 7 columns]
```

<br>

---

<br>

## 6. 집계 결측치
### 6.1 결측치 확인
```python
print(df.sum() / df.count())
print(df.mean())
# 아래 두 결과가 동일하므로, 결측치가 없다는 사실을 알 수 있다.
```
결과:
```
A Process    2.997850
B Process    1.999942
C Process    5.001417
D Process    3.000008
E Process    4.000820
A+B          4.997792
A Level      0.490800
dtype: float64
A Process    2.997850
B Process    1.999942
C Process    5.001417
D Process    3.000008
E Process    4.000820
A+B          4.997792
A Level      0.490800
dtype: float64
```

<br>

### 6.2 GroupBy
```python
df_groupby = df.groupby('A Level').mean()
print(df_groupby)
```
결과:
```json
         A Process  B Process  C Process  D Process  E Process       A+B
A Level                                                                 
0.0       2.919310   1.999703   5.001801   3.000688   4.000865  4.919013
1.0       3.079334   2.000190   5.001019   2.999302   4.000773  5.079524
```

<br>

### 6.3 NaN
```python
df['NaN'] = np.nan
print(df.isna().sum())
```
결과:
```json
A Process        0
B Process        0
C Process        0
D Process        0
E Process        0
A+B              0
A Level          0
Nan          10000
dtype: int64
```